/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.homeassignment;

import java.util.ArrayList;
import java.util.Arrays;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;
import java.time.DateTimeException;
import java.time.*;
import java.time.Year;
import java.time.YearMonth;
import javax.swing.ImageIcon;
import javax.swing.*;

/**
 *
 * @author Abben
 */
public final class EscapeRooms extends javax.swing.JFrame {

    static ArrayList <Integer> roomNumbers = new ArrayList();
    static ArrayList <String> names = new ArrayList();
    static ArrayList <String> surnames = new ArrayList();
    static ArrayList <String> contactNumber = new ArrayList();
    static ArrayList <LocalDate> dates = new ArrayList(); //change to LocalDate
    static ArrayList <Integer> numberOfPersons = new ArrayList();
    static ArrayList <String> extraRequirements = new ArrayList();
    static ArrayList <Integer> filteredBookings = new ArrayList();
    static LocalDate staticUserDate;
    static int selectedRoom = 0;
    
    /**
     * Creates new form EscapeRooms
     */
    public EscapeRooms() {
        initComponents();
        loadBookings();
        returnYears();
        returnDays();
        setIcons();
        //filterBookings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MonthNYear = new javax.swing.JLabel();
        MonthComboBox = new javax.swing.JComboBox<>();
        YearComboBox = new javax.swing.JComboBox<>();
        Day = new javax.swing.JLabel();
        DayComboBox = new javax.swing.JComboBox<>();
        BookingGet = new javax.swing.JButton();
        Room2 = new javax.swing.JButton();
        Room3 = new javax.swing.JButton();
        Room1 = new javax.swing.JButton();
        Room4 = new javax.swing.JButton();
        Room5 = new javax.swing.JButton();
        ExtraInfo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        RefreshBookings = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Escape Rooms");

        MonthNYear.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MonthNYear.setText("Month and Year:");

        MonthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        MonthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthComboBoxActionPerformed(evt);
            }
        });

        YearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YearComboBoxActionPerformed(evt);
            }
        });

        Day.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        Day.setText("Day:");

        DayComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DayComboBoxActionPerformed(evt);
            }
        });

        BookingGet.setText("Get Bookings");
        BookingGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookingGetActionPerformed(evt);
            }
        });

        Room2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room2ActionPerformed(evt);
            }
        });

        Room3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room3ActionPerformed(evt);
            }
        });

        Room1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room1ActionPerformed(evt);
            }
        });

        Room4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room4ActionPerformed(evt);
            }
        });

        Room5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Room5ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        RefreshBookings.setText("Refresh Bookings");
        RefreshBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBookingsActionPerformed(evt);
            }
        });
        jMenu1.add(RefreshBookings);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        jMenu2.add(About);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Day)
                            .addComponent(MonthNYear))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DayComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MonthComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(BookingGet))
                        .addGap(15, 15, 15)
                        .addComponent(YearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(Room1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Room2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Room3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Room4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Room5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ExtraInfo)))
                .addContainerGap(255, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MonthNYear)
                    .addComponent(MonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(YearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Day)
                    .addComponent(DayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BookingGet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(ExtraInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Room5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Room4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Room3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Room2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Room1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MonthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthComboBoxActionPerformed
                // TODO add your handling code here:
                System.out.println(MonthComboBox.getSelectedIndex()+1);
                returnDays();
                setIcons();
                
    }//GEN-LAST:event_MonthComboBoxActionPerformed

    private void YearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YearComboBoxActionPerformed
        // TODO add your handling code here:
                System.out.println(YearComboBox.getSelectedItem());
                returnDays();
                setIcons();
    }//GEN-LAST:event_YearComboBoxActionPerformed

    private void DayComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DayComboBoxActionPerformed
        // TODO add your handling code here:
                
    }//GEN-LAST:event_DayComboBoxActionPerformed

    private void BookingGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookingGetActionPerformed
        // TODO add your handling code here:
        setIcons();
        filterBookings();
        updateIcons();
    }//GEN-LAST:event_BookingGetActionPerformed

    private void Room2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room2ActionPerformed
        // TODO add your handling code here:
        selectedRoom = 2;
        Booking makeBooking = new Booking();
        makeBooking.currentDate = staticUserDate;
        makeBooking.setVisible(true);
    }//GEN-LAST:event_Room2ActionPerformed

    private void Room3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room3ActionPerformed
        // TODO add your handling code here:
        selectedRoom = 3;
        Booking makeBooking = new Booking();
        makeBooking.currentDate = staticUserDate;
        makeBooking.setVisible(true);
    }//GEN-LAST:event_Room3ActionPerformed

    private void Room1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room1ActionPerformed
        // TODO add your handling code here:
        selectedRoom = 1;
        Booking makeBooking = new Booking();
        makeBooking.currentDate = staticUserDate;
        makeBooking.setVisible(true);
    }//GEN-LAST:event_Room1ActionPerformed

    private void Room4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room4ActionPerformed
        // TODO add your handling code here:
        selectedRoom = 4;
        Booking makeBooking = new Booking();
        makeBooking.currentDate = staticUserDate;
        makeBooking.setVisible(true);
    }//GEN-LAST:event_Room4ActionPerformed

    private void Room5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Room5ActionPerformed
        // TODO add your handling code here:
        selectedRoom = 5;
        Booking makeBooking = new Booking();
        makeBooking.currentDate = staticUserDate;
        makeBooking.setVisible(true);
    }//GEN-LAST:event_Room5ActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        // TODO add your handling code here:
        new About().setVisible(true);
    }//GEN-LAST:event_AboutActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        
        int userIn = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Please confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (userIn == JOptionPane.YES_OPTION) {
            System.exit(0);
        } 
        else {
            JOptionPane.getRootFrame().dispose();
        }        
    }//GEN-LAST:event_ExitActionPerformed

    private void RefreshBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBookingsActionPerformed
        // TODO add your handling code here:
        loadBookings();
        setIcons();
        filterBookings();
        updateIcons();
        
    }//GEN-LAST:event_RefreshBookingsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EscapeRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EscapeRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EscapeRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EscapeRooms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EscapeRooms().setVisible(true);
                
            }
        });
        
        //rest of the main
        
    }
    public void returnYears()
    {
        //This method gets the current year and adds it along with the next 2 years after it to the YearComboBox
        LocalDate localDate = LocalDate.now();
        int year = localDate.getYear();
        for (int i = 0; i < 3; i++) {
            YearComboBox.addItem(Integer.toString(year + i));
        }
    }
    
    public void returnDays()
    {
        //This method resets all the items in the DayComboBox and gets the amount of days in the month depending on the month and year of that date
        DayComboBox.removeAllItems();
        System.out.println(YearComboBox.getSelectedItem());
        YearMonth yearMonthObject = YearMonth.of(Integer.parseInt(YearComboBox.getSelectedItem().toString()),MonthComboBox.getSelectedIndex()+1);
        int daysInDate = yearMonthObject.lengthOfMonth();
        for (int i = 0; i < daysInDate; i++) {
            DayComboBox.addItem(Integer.toString(i+1));
        }        
    }
    
    public void setIcons()
    {
        //This method associates each icon with its given button
        ArrayList <ImageIcon> icons = new ArrayList<>();
        ArrayList <JButton> buttons = new ArrayList<>();
        icons.addAll(Arrays.asList(new ImageIcon("images//room1_available.png"),new ImageIcon("images//room2_available.png"),new ImageIcon("images//room3_available.png"),new ImageIcon("images//room4_available.png"),new ImageIcon("images//room5_available.png")));
        buttons.addAll(Arrays.asList(Room1,Room2,Room3,Room4,Room5));
        
        for (int i = 0; i < 5; i++) {
            ImageIcon icon = icons.get(i);
            buttons.get(i).setIcon(icon);
        }
    }
    
    public void loadBookings()
    {
        /*This method reads out all of the data inside the booking.txt file, then it splits all the data everytime a new line is present, 
        making an array with a booking in each element, then for each booking present a new array split the string everytime a comma is present so a new array
        of all the elements in 1 booking is made, with each element being added in its own array, with a blank space added if there is no extra requirment*/
        
        //ArrayList <String> tempData = new ArrayList<>();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String currentData = FileIO.readTextFile("booking.txt");
        System.out.println(currentData);
        String[] tempData = currentData.split("\n");
        
        for (int i = 0; i < tempData.length; i++) {
            String[] bookings = tempData[i].split(",");
            //System.out.println(bookings);
            
            /* for (String id : bookings)
            {
                System.out.println(id);
            }*/
            
            roomNumbers.add(Integer.parseInt(bookings[0]));
            names.add(bookings[1]);
            surnames.add(bookings[2]);
            contactNumber.add(bookings[3]);
            dates.add(LocalDate.parse(bookings[4], format));
            numberOfPersons.add(Integer.parseInt(bookings[5]));
            
            if (bookings.length == 7) {
                extraRequirements.add(bookings[6]);
            }
            else
                extraRequirements.add(" ");
                
        }
        /*
        for (int i = 0; i < tempData.length; i++) {
            System.out.println("Temp data" + tempData[i]);
        }
        
        for (int num : roomNumbers)
        {
            System.out.println(num);
        }
        for (String name : names)
        {
            System.out.println(name);
        }
        for (String surname : surnames)
        {
            System.out.println(surname);
        }
        for (String number : contactNumber)
        {
            System.out.println(number);
        }
        for (LocalDate date : dates)
        {
            System.out.println(date);
        }
        for (int person : numberOfPersons)
        {
            System.out.println(person);
        }
        
        for (String req : extraRequirements)
        {
            System.out.println(req);
        }
        */
    }
   
    public void filterBookings()
    {
        LocalDate userDate = LocalDate.now();
        filteredBookings.clear();
        setIcons();
        int year = Integer.parseInt(YearComboBox.getSelectedItem().toString());
        int month = MonthComboBox.getSelectedIndex()+1; //check this out
        int day = Integer.parseInt(DayComboBox.getSelectedItem().toString());
        
        try{
            userDate = LocalDate.of(year, month, day);
            System.out.println("Date" + userDate);
        }
        catch (DateTimeException e){
            System.out.println(e);
        }
        // file is being read twice for some reason
        /*if (data.length >= 7 ) extarInfo.add(data[6])else {extrainfo.add("")}*/
        System.out.println("boq");
        for (int i = 0; i < dates.size(); i++) {
            System.out.println("Checking date: " + i + ": " + dates.get(i));
            if(dates.get(i).equals(userDate))
            {
                System.out.println("Matching Date");
                filteredBookings.add(roomNumbers.get(i));
            }
        }
        System.out.println(userDate);
        updateIcons();
    }
    
    public void updateIcons() 
    {
        ArrayList <ImageIcon> icons = new ArrayList<>();
        ArrayList <JButton> buttons = new ArrayList<>();
        icons.addAll(Arrays.asList(new ImageIcon("images//room1_booked.png"),new ImageIcon("images//room2_booked.png"),new ImageIcon("images//room3_booked.png"),new ImageIcon("images//room4_booked.png"),new ImageIcon("images//room5_booked.png")));
        buttons.addAll(Arrays.asList(Room1,Room2,Room3,Room4,Room5));
        System.out.println(filteredBookings.get(0));
        updateLabel();
        
        for (int i = 0; i < filteredBookings.size()+1 ; i++) {
            ImageIcon icon = icons.get(filteredBookings.get(i));
            buttons.get(filteredBookings.get(i)).setIcon(icon);
            buttons.get(filteredBookings.get(i)).setEnabled(false);
        }
        
    }
    
    public void updateLabel()
    {//check this out
        int guestCount = 0;
        System.out.println("size = " + filteredBookings.size());
        for (int i = 0; i < filteredBookings.size(); i++) {
            guestCount += numberOfPersons.get(filteredBookings.get(i));
        }
        System.out.println("Update LABEL TIME");
        ExtraInfo.setText("There are " + (5 - filteredBookings.size()) + " rooms avaliable and " + guestCount + " guests who've currently booked.");
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JButton BookingGet;
    private javax.swing.JLabel Day;
    private javax.swing.JComboBox<String> DayComboBox;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JLabel ExtraInfo;
    private javax.swing.JComboBox<String> MonthComboBox;
    private javax.swing.JLabel MonthNYear;
    private javax.swing.JMenuItem RefreshBookings;
    private javax.swing.JButton Room1;
    private javax.swing.JButton Room2;
    private javax.swing.JButton Room3;
    private javax.swing.JButton Room4;
    private javax.swing.JButton Room5;
    private javax.swing.JComboBox<String> YearComboBox;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
